[
    {
        "id": "0d4b3cabb57ddaa4",
        "type": "tab",
        "label": "Drawdown Response: Arthmate",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "5ce04892db46d684",
        "type": "http in",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "url": "/response-drawdown",
        "method": "post",
        "upload": false,
        "swaggerDoc": "",
        "x": 190,
        "y": 60,
        "wires": [
            [
                "419606cdc47fb213"
            ]
        ]
    },
    {
        "id": "3a368ea88fa6635d",
        "type": "http response",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 730,
        "y": 840,
        "wires": []
    },
    {
        "id": "419606cdc47fb213",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "check for header",
        "func": "const ARTHMATE_KEY = env.get('ARTHMATE_KEY');\nconst ARTHMATE_VALUE = env.get('ARTHMATE_VALUE');\n\nlet data= {...msg};\nlet headers=data.req.rawHeaders;\nlet key =\"Authorization\";\nlet value = \"Bearer WaBgTPMYVCVbGnmmtdQ2UZuCWcKYBu\"\nlet idx=indexof(headers,key);\n\nif (headers[idx+1]===value)\n    return msg;\nelse{\n    msg.payload={\n        \"success\":false,\n        \"message\":\"Bad request\"\n    }\n    return msg;\n}\n\nfunction indexof(headers,key){\n    let  length = headers.length;\n    for (let index = 0; index < length / 2; index += 2) {\n        if (headers[index] === key) {\n            return index;\n        }\n        if (headers[length - 2 - index] === key) {\n            return length - 2 - index;\n        }\n    }\n}",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 450,
        "y": 60,
        "wires": [
            [
                "f72edbed385148af"
            ]
        ]
    },
    {
        "id": "f72edbed385148af",
        "type": "switch",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "property": "payload.success",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "neq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 150,
        "y": 120,
        "wires": [
            [
                "d344c06c4044d665"
            ],
            [
                "1e88e1feea5d42b6"
            ]
        ]
    },
    {
        "id": "d344c06c4044d665",
        "type": "http response",
        "z": "0d4b3cabb57ddaa4",
        "name": "Bad Request",
        "statusCode": "400",
        "headers": {},
        "x": 670,
        "y": 100,
        "wires": []
    },
    {
        "id": "bd4696441c1e7f86",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "Mapping Drawdown",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL');\n\nlet data = msg.drawdown_data;\nlet drawdown_response = msg.drawdown_response;\nlet token=flow.get(\"token\");\n\nmsg.url = `${PAYLATER_URL}/v1/loan-drawdown`;\nmsg.method = 'PATCH';\nmsg.headers = {\n    \"Authorization\": `Bearer ${token.idToken}`,\n    \"bankId\": env.get('BANK_ID')\n}\n\nmsg.payload={};\n\nif (drawdown_response.data.status_code === \"30\") {\n    msg.payload = {\n        \"requestUniqueCode\": data[0].requestUniqueCode,\n        \"drawdownStatus\": \"paid\",\n        \"disbursedAmount\": drawdown_response.data.net_disbur_amt,\n    }\n} else {\n    msg.payload = {\n        \"requestUniqueCode\": data[0].requestUniqueCode,\n        \"drawdownStatus\": \"failed\",\n   }\n}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 660,
        "wires": [
            [
                "d9237eb0fade40e7"
            ]
        ]
    },
    {
        "id": "d9237eb0fade40e7",
        "type": "http request",
        "z": "0d4b3cabb57ddaa4",
        "name": "Update Drawdown",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 660,
        "wires": [
            [
                "dc409b5a540c68c5",
                "5bcc9b845b7b62b6"
            ]
        ]
    },
    {
        "id": "1e88e1feea5d42b6",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "Authorization Paylater",
        "func": "const ADMIN_URL = env.get('ADMIN_URL');\nconst EMAIL=env.get('EMAIL');\nconst PASSWORD=env.get('PASSWORD');\n\nmsg.drawdown_response = msg.payload;\nmsg.headers = {};\nmsg.method = \"POST\";\nmsg.url = `${ADMIN_URL}/api/user/authenticateUser`;\nmsg.payload = {\n    \"email\": EMAIL,\n    \"password\": PASSWORD\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 160,
        "wires": [
            [
                "1dd3ed36a7f896d8"
            ]
        ]
    },
    {
        "id": "1dd3ed36a7f896d8",
        "type": "http request",
        "z": "0d4b3cabb57ddaa4",
        "name": "Requesting Authorization",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 630,
        "y": 160,
        "wires": [
            [
                "e37cd153e33cc252"
            ]
        ]
    },
    {
        "id": "e37cd153e33cc252",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "search for drawdown",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL');\n\nflow.set(\"token\", msg.payload);\nlet data=msg.payload;\nlet drawdown_response = msg.drawdown_response;\n// console.log(\"dvdf\",msg.drawdown_response);\nmsg.url =`${PAYLATER_URL}/v1/loan-drawdown/fetch`;\nmsg.method=\"POST\";\nmsg.payload={\n    \"bankProvidedDrawdownCodes\": drawdown_response.data.request_id.toString()\n}\nmsg.headers={\n    \"Authorization\":`Bearer ${data.idToken}`,\n    \"bankId\": env.get('BANK_ID')\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 220,
        "wires": [
            [
                "1be0904b6809846b"
            ]
        ]
    },
    {
        "id": "1be0904b6809846b",
        "type": "http request",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 590,
        "y": 220,
        "wires": [
            [
                "f202c2e4c5a1791f",
                "0c185559c9eefe7e"
            ]
        ]
    },
    {
        "id": "dbe454f0a4893b30",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "response",
        "func": "let data=msg;\n\nlet drawdown_response = msg.drawdown_response;\n\nif(data.statusCode===201){\n    let status = data.drawdownStatus;\n    msg.statusCode=200\n    msg.payload={\n        \"status\":status,\n        \"data\":drawdown_response.data\n    }\n    return msg;\n}\nelse{\n    return msg;\n}\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 840,
        "wires": [
            [
                "3a368ea88fa6635d"
            ]
        ]
    },
    {
        "id": "8023c14f5f54d0e7",
        "type": "http response",
        "z": "0d4b3cabb57ddaa4",
        "name": "Not Found",
        "statusCode": "404",
        "headers": {},
        "x": 870,
        "y": 280,
        "wires": []
    },
    {
        "id": "0c185559c9eefe7e",
        "type": "switch",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "property": "payload.length",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "0",
                "vt": "str"
            },
            {
                "t": "neq",
                "v": "0",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 310,
        "y": 300,
        "wires": [
            [
                "fe43c764f9d3b9ca"
            ],
            [
                "6c696c5c7a4980b7"
            ]
        ]
    },
    {
        "id": "dc409b5a540c68c5",
        "type": "debug",
        "z": "0d4b3cabb57ddaa4",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 660,
        "wires": []
    },
    {
        "id": "f202c2e4c5a1791f",
        "type": "debug",
        "z": "0d4b3cabb57ddaa4",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 220,
        "wires": []
    },
    {
        "id": "5bcc9b845b7b62b6",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "callCashApplicationSP",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL');\nconst token=flow.get(\"token\");\n\nmsg.drawdownStatus=msg.payload.drawdownStatus\nmsg.url = `${PAYLATER_URL}/v1/cash-application/sp`\nmsg.method = 'POST'\nmsg.headers = {\n    \"Authorization\": `Bearer ${token.idToken}`,\n    \"bankId\": env.get('BANK_ID')\n}\n\nmsg.payload = {\n    transactionDate: new Date().toISOString().split('T')[0] // 2023-01-28\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 480,
        "y": 720,
        "wires": [
            [
                "e3bb023b4266cd34"
            ]
        ]
    },
    {
        "id": "4698051a825cc7cb",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "callDailyLedgerSP",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL')\nconst token=flow.get(\"token\");\n\nmsg.url = `${PAYLATER_URL}/v1/daily-ledger/sp`\nmsg.method = 'POST'\nmsg.headers = {\n    \"Authorization\": `Bearer ${token.idToken}`,\n    \"bankId\": env.get('BANK_ID')\n}\n\nmsg.payload = {\n    transactionDate: new Date().toISOString().split('T')[0] // 2023-01-28\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 780,
        "wires": [
            [
                "abe8f42a34d6cfed"
            ]
        ]
    },
    {
        "id": "e3bb023b4266cd34",
        "type": "http request",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 710,
        "y": 720,
        "wires": [
            [
                "4698051a825cc7cb",
                "b7590adcac9358dd"
            ]
        ]
    },
    {
        "id": "abe8f42a34d6cfed",
        "type": "http request",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 780,
        "wires": [
            [
                "dbe454f0a4893b30",
                "101f152150e9a5eb"
            ]
        ]
    },
    {
        "id": "b7590adcac9358dd",
        "type": "debug",
        "z": "0d4b3cabb57ddaa4",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 890,
        "y": 720,
        "wires": []
    },
    {
        "id": "101f152150e9a5eb",
        "type": "debug",
        "z": "0d4b3cabb57ddaa4",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 910,
        "y": 780,
        "wires": []
    },
    {
        "id": "1717903c62a8c95e",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "checking event",
        "func": "let data=msg.payload;\nlet drawdown_response = msg.drawdown_response;\nlet loanid = data[0].crnNumber.split('|');\n\n\nif (drawdown_response.event_key === \"disbursement\" && drawdown_response.data.loan_id===loanid[1])\n    return msg;\nelse{\n    msg.payload = {\n        \"success\": false,\n        \"message\": \"Not Found\"   \n    }\n    msg.statusCode=404\n    return msg;\n}\n    ",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 460,
        "y": 580,
        "wires": [
            [
                "daa86b9f000f736f"
            ]
        ]
    },
    {
        "id": "daa86b9f000f736f",
        "type": "switch",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "property": "payload.success",
        "propertyType": "msg",
        "rules": [
            {
                "t": "false"
            },
            {
                "t": "neq",
                "v": "false",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 710,
        "y": 580,
        "wires": [
            [
                "7405e2e26cb71500"
            ],
            [
                "bd4696441c1e7f86"
            ]
        ]
    },
    {
        "id": "7405e2e26cb71500",
        "type": "http response",
        "z": "0d4b3cabb57ddaa4",
        "name": "Bad Request",
        "statusCode": "",
        "headers": {},
        "x": 910,
        "y": 580,
        "wires": []
    },
    {
        "id": "fe43c764f9d3b9ca",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "Message",
        "func": "msg.payload={\n    \"success\":false,\n    \"message\":\"Drawdown Not Found\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 560,
        "y": 300,
        "wires": [
            [
                "8023c14f5f54d0e7"
            ]
        ]
    },
    {
        "id": "6c696c5c7a4980b7",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "Search Bank Application",
        "func": "const GO_URL = env.get('GO_URL');\n\nlet drawdown_response = msg.drawdown_response;\nmsg.drawdown_data=msg.payload;\n\nmsg.url = `${GO_URL}/bank-application/${drawdown_response.data.partner_loan_id}`;\nmsg.method = \"GET\";\nmsg.payload = {};\nmsg.headers = {};\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 490,
        "y": 360,
        "wires": [
            [
                "54c653e371add473"
            ]
        ]
    },
    {
        "id": "54c653e371add473",
        "type": "http request",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 750,
        "y": 360,
        "wires": [
            [
                "e904746def401161",
                "3cda13a8c90c61b2"
            ]
        ]
    },
    {
        "id": "e904746def401161",
        "type": "debug",
        "z": "0d4b3cabb57ddaa4",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 950,
        "y": 360,
        "wires": []
    },
    {
        "id": "2e34e83979d2bdbe",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "search Loan Term",
        "func": "const PAYLATER_URL = env.get('PAYLATER_URL');\n\n\nlet token = flow.get('token');\nlet data=msg.payload;\n\nmsg.url = `${PAYLATER_URL}/v1/loan-terms/fetch`;\nmsg.method = \"POST\";\nmsg.payload = {\n    \"borrowerID\": data.businessPartner,\n    \"enterpriseID\": data.enterprise,\n    \"bankID\": data.bankID,\n    \"toMask\": false\n}\nmsg.headers = {\n    \"Authorization\": `Bearer ${token.idToken}`,\n    \"bankId\": env.get('BANK_ID')\n}\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 470,
        "y": 500,
        "wires": [
            [
                "00ea54db1a82af22",
                "eea5f27f7c6713ab"
            ]
        ]
    },
    {
        "id": "00ea54db1a82af22",
        "type": "http request",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "method": "use",
        "ret": "obj",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "insecureHTTPParser": false,
        "authType": "",
        "senderr": false,
        "headers": [],
        "x": 730,
        "y": 500,
        "wires": [
            [
                "eea5f27f7c6713ab",
                "1717903c62a8c95e"
            ]
        ]
    },
    {
        "id": "eea5f27f7c6713ab",
        "type": "debug",
        "z": "0d4b3cabb57ddaa4",
        "name": "msg",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 930,
        "y": 480,
        "wires": []
    },
    {
        "id": "3cda13a8c90c61b2",
        "type": "switch",
        "z": "0d4b3cabb57ddaa4",
        "name": "",
        "property": "payload.statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "500",
                "vt": "num"
            },
            {
                "t": "neq",
                "v": "500",
                "vt": "str"
            }
        ],
        "checkall": "false",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 440,
        "wires": [
            [
                "bd0156dd3caf1f36"
            ],
            [
                "2e34e83979d2bdbe"
            ]
        ]
    },
    {
        "id": "18f90592e116f461",
        "type": "http response",
        "z": "0d4b3cabb57ddaa4",
        "name": "Bad Request",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 440,
        "wires": []
    },
    {
        "id": "bd0156dd3caf1f36",
        "type": "function",
        "z": "0d4b3cabb57ddaa4",
        "name": "Msg",
        "func": "msg.payload = {\n    \"success\": false,\n    \"message\": \"Not Found\"\n}\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 650,
        "y": 440,
        "wires": [
            [
                "18f90592e116f461"
            ]
        ]
    }
]